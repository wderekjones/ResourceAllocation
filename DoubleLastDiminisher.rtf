{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 	void last_diminisher(std::vector<Agent*> players)\
	\{\
\
\
		double alpha = double(1.0 / players.size());\
		std::cout << "alpha = " << alpha << std::endl;\
\
		std::vector<std::vector<double>> cutMatrix;\
\
\
		for(int i = 0 ; i < players.size(); i++)\
		\{\
			std::vector<double> pIVDist;\
			pIVDist = players[i]->get_value_dist();\
			cutMatrix.push_back(pIVDist);\
		\}\
\
\
	for(int i = 0 ; i < cutMatrix.size(); i++)\
	\{\
		for(int j = 0; j< cutMatrix[i].size(); j++)\
		\{\
				std::cout<<cutMatrix[i][j]<< " ";\
		\}\
		std::cout<<"\\n";\
	\}\
\
	std::cout<<std::endl;\
\
\
	std::cout<<"popping p rows "<<std::endl;\
\
	for(int i =0 ; i < players.size(); i ++)\
	\{\
		double val = 0.0;\
\
		int lastCol = cutMatrix.size();\
\
		val = players[0]->doubleEval_share(cutMatrix[i]);\
\
		std::cout<<"Players 1 values row "<<i<<" as "<<val<<std::endl;\
\
		for( int j = 0; j < cutMatrix.size() + 1; j++)\
		\{\
			cutMatrix[j].pop_back();\
		\}\
\
		//for( int z = 0 ; z < )\
\
	\}\
\
\
	/*for(int i = 0 ; i < players.size(); i++)\
	\{\
		if(i > 0 )\
		\{\
			//std::cout<<"subsets chosen"<<std::endl;\
			int max_I = players.size();\
			double pVal = 0.0;\
			pVal = players[i]->eval_share(cutMatrix[i]);\
			//std::cout<<pVal<<" ";\
\
			if(pVal > alpha)\
			\{\
				if(cutMatrix[i].size() > 0)\
				\{\
					std::cout<<"Alarm tipped"<<std::endl;\
\
					for(int j = 0; j < temp_cuts.size(); j++)\
					\{\
						std::vector<double> temp_cuts = players[0]->doublecut(cutMatrix[0],alpha);\
						std::cout<<temp_cuts[j]<<" ";\
					\}\
					std::cout<<std::endl;\
					cutMatrix.pop_back();\
				\}\
			\}\
		\}*/\
\
\
		std::cout<<std::endl;\
\
	\}}
{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 void last_diminisher(std::vector<Agent*> players)\
	\{\
		std::vector<int> cake;\
\
		for (int i = 0; i < players[0]->get_value_dist().size(); i++)\
		\{\
			cake.push_back(i);\
		\}\
\
		double alpha = double(1.0/players.size());\
		std::cout<<"alpha = "<<alpha<<std::endl;\
\
		std::vector<int> cuts;\
\
		std::cout<<"initial cake.size() = "<<cake.size()<<std::endl;\
		std::vector<std::vector<int>> S;\
\
		for(int i = 0; i < players.size(); i++)\
		\{\
			S.push_back(cake);\
		\}\
		int j = 0;\
		while(players.size() > 2)\
		\{\
			// STEP 1: player p[0] cuts piece S0 such that V_0(S_0) = alpha\
\
			cuts = players[0] ->cut(alpha); //\
\
			std::sort(cuts.begin(),cuts.end());\
			auto last = std::unique(cuts.begin(),cuts.end());\
			cuts.erase(last,cuts.end());\
\
			std::cout<<players[0]->eval_share(cuts)<<std::endl;\
\
			std::vector<int> new_cuts;\
			new_cuts = cuts;\
\
			/*for(int i = 1; i < players.size(); i++ )\
			\{\
				std::cout<<"Player["<<i<<"] values cut "<<j<<"="<<players[i]->eval_share(cuts)<<std::endl;\
				std::cout<<new_cuts.size()<<std::endl;\
				new_cuts = players[i]->diminish_cut(new_cuts,alpha,0);\
\
				std::vector<double> resized_val_dist = players[i]->get_value_dist();\
				std::sort(resized_val_dist.begin(),resized_val_dist.end());\
\
				//for(int z = 0; z<new_cuts.size(); z++)\
				//\{\
					//resized_val_dist.erase(resized_val_dist.begin() + new_cuts[i]);\
					//std::cout<<"value dist of player["<<i<<"]"<<resized_val_dist[z]<<std::endl;\
				//\}\
				//players[i]->set_value_dist(resized_val_dist);\
\
			\}*/\
\
			players.pop_back();\
			std::cout<<std::endl;\
			j++;\
\
		\}\
\
	\}}
Development Log

Need to finish generate output of player shares and valuations as well as number of iterations and values of util_coefficients and bias

$ keep track of difference between valuations (error? and graph versus number of iterations to get an idea of the realtionship between
	simulation size and welfare of the protocol)

$ use quadratic value functions? with linear functions, an optimal allocation would need to be the entire cake for all agents, need to make sure quadratic values satisfy assumptions made in the text. But assuming a quadratic would allow for the problem to be modeled in a more
realistic fashion because (assuming a concave value function) there is a global maxima in the unit interval that represents the point where
the agent recieves the amount of cake they most want (not too little or too much). 


03/09/2016
	After adjusing the psuedo-genetic algorithm code to generate sets of indexes instead of subsets of doubles from the actual value distributions, I am able to return a vector of indexes
	that indicate what portion of the resouce (vector<int> ), which has equivalent length for both agents, belongs to a piece i.
	$ Implemented the final version of the cut and choose protocol for n = 2 players. 
	$ Planning to implement last diminisher protocol, however the concern that the cut and choose protocol, as is, is a bit slow with a fairly basic implementation of the algorithm itself (the sub components are to blame for the speed of the program), the last diminisher protocol will add another layer of complexity.
	$For output, planning to define a "schema" or a row of values for each instance of the program. The goal is to log the values of certain parameters such as the size (length of the vector) of the resource, the value alpha, the protocol itself, etc; and then graph these values and maybe run a regression to analyze the effects. 
	$Write up will probably include a section about this
	$implemented GA with the necessary functions. The program is a bit faster (seemingly at first) and is managing to generate solutions that are pretty close to what I had originally where I generated a bunch of solutions and linearly sorted through to find the best one. 